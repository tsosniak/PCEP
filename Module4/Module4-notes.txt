https://edube.org/learn/programming-essentials-in-python-part-1-v1-1/python-essentials-1-module-4-1

1. Why do we need functions?
- a particular piece of code is repeated many times in your program: programmer will have a lot of drudgery to find all the places that need corrections.
There's also a high risk of the corrections causing errors.

RULES:
1. if a particular fragment of the code begins to appear in more than one place, consider the possibility of isolating it in the form of a function invoked from the points where the original code was placed before
2. if a piece of code becomes so large that reading and understating it may cause a problem, consider dividing it into separate, smaller problems, and implement each of them in the form of a separate function.
A good and attentive developer divides the code (or more accurately: the problem) into well-isolated pieces, and encodes each of them in the form of a function.
This considerably simplifies the work of the program, because each piece of code can be encoded separately, and tested separately. The process described here is often called decomposition.
3.Decomposition
if you're going to divide the work among multiple programmers, decompose the problem to allow the product to be implemented as a set of separately written functions packed together in different modules.
This kind of decomposition has a different purpose to the one described previously - it's not only about sharing the work, but also about sharing the responsibility among many developers.
Each of them writes a clearly defined and described set of functions, which when combined into the module (we'll tell you about this a bit later) will give the final product.

2. Functions
def function_name():
    function_body

It always starts with the keyword def (for define)
next after def goes the name of the function (the rules for naming functions are exactly the same as for naming variables)
after the function name, there's a place for a pair of parentheses (they contain nothing here, but that will change soon)
the line has to be ended with a colon;
the line directly after def begins the function body - a couple (at least one) of necessarily nested instructions, which will be executed every time the function is invoked; note: the function ends where the nesting ends, so you have to be careful.

when you invoke a function, Python remembers the place where it happened and jumps into the invoked function;
the body of the function is then executed;
reaching the end of the function forces Python to return to the place directly after the point of invocation.

!!!You mustn't invoke a function which is not known at the moment of invocation!!!!
Remember - Python reads your code from top to bottom. It's not going to look ahead in order to find a function you forgot to put in the right place
You end up with NameError

!!!You mustn't have a function and a variable of the same name.!!!

3. Key takeaways

1. A function is a block of code that performs a specific task when the function is called (invoked). You can use functions to make your code reusable, better organized, and more readable. Functions can have parameters and return values.

2. There are at least four basic types of functions in Python:

built-in functions which are an integral part of Python (such as the print() function). You can see a complete list of Python built-in functions at https://docs.python.org/3/library/functions.html.
the ones that come from pre-installed modules (you'll learn about them in the Python Essentials 2 course)
user-defined functions which are written by users for users - you can write your own functions and use them freely in your code,
the lambda functions (you'll learn about them in the Python Essentials 2 course.)
3. You can define your own function using the def keyword and the following syntax:

def your_function(optional parameters):
    # the body of the function


You can define a function which doesn't take any arguments, e.g.:

def message():    # defining a function
    print("Hello")    # body of the function

message()    # calling the function


You can define a function which takes arguments, too, just like the one-parameter function below:

def hello(name):    # defining a function
    print("Hello,", name)    # body of the function


name = input("Enter your name: ")

hello(name)    # calling the function


We'll tell you more about parametrized functions in the next section. Don't worry.


4. Parameterized functions
The function's full power reveals itself when it can be equipped with an interface that is able to accept data provided by the invoker
parameters exist only inside functions in which they have been defined, and the only place where the parameter can be defined is a space between a pair of parentheses in the def statement;
assigning a value to the parameter is done at the time of the function's invocation, by specifying the corresponding argument.

Don't forget:
parameters live inside functions (this is their natural environment)
arguments exist outside functions, and are carriers of values passed to corresponding parameters.

def message(number):
    ###
The definition specifies that our function operates on just one parameter named number. You can use it as an ordinary variable, but only inside the function - it isn't visible anywhere else.

Remember: specifying one or more parameters in a function's definition is also a requirement, and you have to fulfil it during invocation. You must provide as many arguments as there are defined parameters.
Failure to do so will cause an error.

It's legal, and possible, to have a variable named the same as a function's parameter.
A situation like this activates a mechanism called shadowing:
parameter x shadows any variable of the same name, but...
... only inside the function defining the parameter.

A function can have as many parameters as you want, but the more parameters you have, the harder it is to memorize their roles and purposes.


5. Positional parameter passing vs. Keyword argument passing
The concept is clear - the values passed to the parameters are preceded by the target parameters' names, followed by the = sign.
you mustn't use a non-existent parameter name (TypeError)

6. Mixing positional and keyword arguments
!!!you have to put positional arguments before keyword arguments.!!!

Be careful, and beware of mistakes. If you try to pass more than one value to one argument, all you'll get is a runtime error.
Look at the invocation below - it seems that we've tried to set a twice:
adding(3, a = 1, b = 2)
Python's response:
TypeError:

7. default (predefined) values
def introduction(first_name, last_name="Smith"):
    print("Hello, my name is", first_name, last_name)

8. Key takeaways
1. You can pass information to functions by using parameters. Your functions can have as many parameters as you need.

An example of a one-parameter function:

def hi(name):
    print("Hi,", name)

hi("Greg")


An example of a two-parameter function:

def hi_all(name_1, name_2):
    print("Hi,", name_2)
    print("Hi,", name_1)

hi_all("Sebastian", "Konrad")


An example of a three-parameter function:

def address(street, city, postal_code):
    print("Your address is:", street, "St.,", city, postal_code)

s = input("Street: ")
p_c = input("Postal Code: ")
c = input("City: ")

address(s, c, p_c)


2. You can pass arguments to a function using the following techniques:

positional argument passing in which the order of arguments passed matters (Ex. 1),
keyword (named) argument passing in which the order of arguments passed doesn't matter (Ex. 2),
a mix of positional and keyword argument passing (Ex. 3).
Ex. 1
def subtra(a, b):
    print(a - b)

subtra(5, 2)    # outputs: 3
subtra(2, 5)    # outputs: -3


Ex. 2
def subtra(a, b):
    print(a - b)

subtra(a=5, b=2)    # outputs: 3
subtra(b=2, a=5)    # outputs: 3

Ex. 3
def subtra(a, b):
    print(a - b)

subtra(5, b=2)    # outputs: 3
subtra(5, 2)    # outputs: 3


It's important to remember that positional arguments mustn't follow keyword arguments. That's why if you try to run the following snippet:

def subtra(a, b):
    print(a - b)

subtra(5, b=2)    # outputs: 3
subtra(a=5, 2)    # Syntax Error

Python will not let you do it by signalling a SyntaxError.




3. You can use the keyword argument passing technique to pre-define a value for a given argument:

def name(first_name, last_name="Smith"):
    print(first_name, last_name)

name("Andy")    # outputs: Andy Smith
name("Betty", "Johnson")    # outputs: Betty Johnson (the keyword argument replaced by "Johnson")

subtra(a=5, 2)
SyntaxError: positional argument follows keyword argument


9. Effects and results: the return instruction
immediate termination of the function's execution, and an instant return (hence the name) to the point of invocation.
using the return instruction is not obligatory
you can use it to terminate a function's activities on demand, before the control reaches the function's last line.

10. A few words about None
Its data doesn't represent any reasonable value - actually, it's not a value at all; hence, it mustn't take part in any expressions.
print(None + 2) --> ends with TypeError

None is a keyword.!!!
There are only two kinds of circumstances when None can be safely used:
when you assign it to a variable (or return it as a function's result)
when you compare it with a variable to diagnose its internal state.

11. Key takeaways

1. You can use the return keyword to tell a function to return some value. The return statement exits the function, e.g.:

def multiply(a, b):
    return a * b

print(multiply(3, 4))    # outputs: 12


def multiply(a, b):
    return

print(multiply(3, 4))    # outputs: None


2. The result of a function can be easily assigned to a variable, e.g.:

def wishes():
    return "Happy Birthday!"

w = wishes()

print(w)    # outputs: Happy Birthday!

Look at the difference in output in the following two examples:

# Example 1
def wishes():
    print("My Wishes")
    return "Happy Birthday"

wishes()    # outputs: My Wishes


# Example 2
def wishes():
    print("My Wishes")
    return "Happy Birthday"

print(wishes())

# outputs: My Wishes
#          Happy Birthday


3. You can use a list as a function's argument, e.g.:

def hi_everybody(my_list):
    for name in my_list:
        print("Hi,", name)

hi_everybody(["Adam", "John", "Lucy"])


4. A list can be a function result, too, e.g.:

def create_list(n):
    my_list = []
    for i in range(n):
        my_list.append(i)
    return my_list

print(create_list(5))


12. Functions and scopes
The scope of a name (e.g., a variable name) is the part of a code where the name is properly recognizable.
For example, the scope of a function's parameter is the function itself. The parameter is inaccessible outside the function.

A variable existing outside a function has a scope inside the functions' bodies, excluding those of them which define a variable of the same name.
scope of a variable existing outside a function is supported only when getting its value (reading).
!!!Assigning a value forces the creation of the function's own variable.!!!

the global keyword
There's a special Python method which can extend a variable's scope in a way which includes the functions' bodies (even if you want not only to read the values, but also to modify them)

changing the parameter's value doesn't propagate outside the function (in any case, not when the variable is a scalar, like in the example).
This also means that a function receives the argument's value, not the argument itself

if the argument is a list, then changing the value of the corresponding parameter doesn't affect the list (remember: variables containing lists are stored in a different way than scalars),
but if you change a list identified by the parameter (note: the list, not the parameter!), the list will reflect the change.


13. Key takeaways

1. A variable that exists outside a function has a scope inside the function body (Example 1) unless the function defines a variable of the same name (Example 2, and Example 3), e.g.:

Example 1:

var = 2


def mult_by_var(x):
    return x * var


print(mult_by_var(7))    # outputs: 14


Example 2:

def mult(x):
    var = 5
    return x * var


print(mult(7))    # outputs: 35


Example 3:

def mult(x):
    var = 7
    return x * var


var = 3
print(mult(7))    # outputs: 49


2. A variable that exists inside a function has a scope inside the function body (Example 4), e.g.:

Example 4:

def adding(x):
    var = 7
    return x + var


print(adding(4))    # outputs: 11
print(var)    # NameError


3. You can use the global keyword followed by a variable name to make the variable's scope global, e.g.:

var = 2
print(var)    # outputs: 2


def return_var():
    global var
    var = 5
    return var


print(return_var())    # outputs: 5
print(var)    # outputs: 5


14. Recursion - technique where a function invokes itself.
If you forget to consider the conditions which can stop the chain of recursive invocations, the program may enter an infinite loop
-RecursionError: maximum recursion depth exceeded

15. Key takeaways
1. A function can call other functions or even itself. When a function calls itself, this situation is known as recursion, and the function which calls itself and contains a specified termination condition (i.e., the base case - a condition which doesn't tell the function to make any further calls to that function) is called a recursive function.

2. You can use recursive functions in Python to write clean, elegant code, and divide it into smaller, organized chunks. On the other hand, you need to be very careful as it might be easy to make a mistake and create a function which never terminates. You also need to remember that recursive calls consume a lot of memory, and therefore may sometimes be inefficient.

When using recursion, you need to take all its advantages and disadvantages into consideration.

The factorial function is a classic example of how the concept of recursion can be put in practice:

# Recursive implementation of the factorial function.

def factorial(n):
    if n == 1:    # The base case (termination condition.)
        return 1
    else:
        return n * factorial(n - 1)


print(factorial(4)) # 4 * 3 * 2 * 1 = 24

https://edube.org/learn/programming-essentials-in-python-part-1-v1-1/tuples-and-dictionaries-14

16. Sequence types and mutability
A sequence type is a type of data in Python which is able to store more than one value (or less than one, as a sequence may be empty), and these values can be sequentially (hence the name) browsed, element by element.

mutability - is a property of any of Python's data that describes its readiness to be freely changed during program execution. There are two kinds of Python data: mutable and immutable.
Mutable data can be freely updated at any time
Immutable data cannot be modified in this way.

 A tuple is an immutable sequence type
tuple_1 = (1, 2, 4, 8)
tuple_2 = 1., .5, .25, .125

each tuple element may be of a different type

empty_tuple = () --> empty tuple
one-element tuple
one_element_tuple_1 = (1, )
one_element_tuple_2 = 1.,

If you want to get the elements of a tuple in order to read them over, you can use the same conventions to which you're accustomed while using lists.

don't try to modify a tuple's contents! - will cause a runtime error:
like: AttributeError: 'tuple' object has no attribute 'append'
    my_tuple.append(10000)
    del my_tuple[0]
    my_tuple[1] = -10

One of the most useful tuple properties is their ability to appear on the left side of the assignment operator
like swapping: t1, t2, t3 = t2, t3, t1

 tuple's elements can be variables


17. What is a dictionary?
The dictionary is another Python data structure. It's not a sequence type (but can be easily adapted to sequence processing) and it is mutable.
This means that a dictionary is a set of key-value pairs.

each key must be unique - it's not possible to have more than one key of the same value;
a key may be any immutable type of object: it can be a number (integer or float), or even a string, but not a list;
a dictionary is not a list - a list contains a set of numbered values, while a dictionary holds pairs of values;
the len() function works for dictionaries, too - it returns the numbers of key-value elements in the dictionary;
a dictionary is a one-way tool - if you have an English-French dictionary, you can look for French equivalents of English terms, but not vice versa.

The list of pairs is surrounded by curly braces, while the pairs themselves are separated by commas, and the keys and values by colons.
dictionary = {"cat": "chat", "dog": "chien", "horse": "cheval"}
phone_numbers = {'boss': 5551234567, 'Suzy': 22657854310}
empty_dictionary = {}

the dictionary as a whole can be printed with a single print() invocation.

!!! (*) In Python 3.6x dictionaries have become ordered collections by default. !!!

keys are case-sensitive: 'Suzy' is something different from 'suzy'.

you mustn't use a non-existent key.
The in operator, together with its companion, not in, can salvage this situation.

When you write a big or lengthy expression, it may be a good idea to keep it vertically aligned. T
# Example 1:
dictionary = {
              "cat": "chat",
              "dog": "chien",
              "horse": "cheval"
              }

Such ways of formatting code are called hanging indents.

https://edube.org/learn/programming-essentials-in-python-part-1-v1-1/tuples-and-dictionaries-methods-4


18. keys()
The method returns an iterable object consisting of all the keys gathered within the dictionary
dictionary = {"cat": "chat", "dog": "chien", "horse": "cheval"}

for key in dictionary.keys():
    print(key, "->", dictionary[key]


19. The sorted() function
for key in sorted(dictionary.keys()):

20. The items() and values() methods
items(). The method returns tuples (this is the first example where tuples are something more than just an example of themselves) where each tuple is a key-value pair.

dictionary = {"cat": "chat", "dog": "chien", "horse": "cheval"}

for english, french in dictionary.items():
    print(english, "->", french)

values(), which works similarly to keys(), but returns values.
As the dictionary is not able to automatically find a key for a given value, the role of this method is rather limited

21. How to use a dictionary: modifying and adding values
dictionaries are fully mutable

dictionary = {"cat": "chat", "dog": "chien", "horse": "cheval"}
dictionary['cat'] = 'minou'

Adding a new key - you only have to assign a value to a new, previously non-existent key.
dictionary = {"cat": "chat", "dog": "chien", "horse": "cheval"}
dictionary['swan'] = 'cygne'

You can also insert an item to a dictionary by using the update() method, e.g.:
dictionary = {"cat": "chat", "dog": "chien", "horse": "cheval"}
dictionary.update({"duck": "canard"})

Removing a key - Note: removing a non-existing key causes an error.
dictionary = {"cat": "chat", "dog": "chien", "horse": "cheval"}
del dictionary['dog']

To remove the last item in a dictionary, you can use the popitem() method:
dictionary = {"cat": "chat", "dog": "chien", "horse": "cheval"}
dictionary.popitem()
Note: In the older versions of Python, i.e., before 3.6.7, the popitem() method removes a random item from a dictionary.

22. Key takeaways: tuples

1. Tuples are ordered and unchangeable (immutable) collections of data. They can be thought of as immutable lists. They are written in round brackets:

my_tuple = (1, 2, True, "a string", (3, 4), [5, 6], None)
print(my_tuple)

my_list = [1, 2, True, "a string", (3, 4), [5, 6], None]
print(my_list)


Each tuple element may be of a different type (i.e., integers, strings, booleans, etc.). What is more, tuples can contain other tuples or lists (and the other way round).

2. You can create an empty tuple like this:

empty_tuple = ()
print(type(empty_tuple))    # outputs: <class 'tuple'>


3. A one-element tuple may be created as follows:

one_elem_tuple_1 = ("one", )    # Brackets and a comma.
one_elem_tuple_2 = "one",       # No brackets, just a comma.


If you remove the comma, you will tell Python to create a variable, not a tuple:

my_tuple_1 = 1,
print(type(my_tuple_1))    # outputs: <class 'tuple'>

my_tuple_2 = 1             # This is not a tuple.
print(type(my_tuple_2))    # outputs: <class 'int'>


4. You can access tuple elements by indexing them:

my_tuple = (1, 2.0, "string", [3, 4], (5, ), True)
print(my_tuple[3])    # outputs: [3, 4]


5. Tuples are immutable, which means you cannot change their elements (you cannot append tuples, or modify, or remove tuple elements). The following snippet will cause an exception:

my_tuple = (1, 2.0, "string", [3, 4], (5, ), True)
my_tuple[2] = "guitar"    # The TypeError exception will be raised.


However, you can delete a tuple as a whole:

my_tuple = 1, 2, 3,
del my_tuple
print(my_tuple)    # NameError: name 'my_tuple' is not defined





6. You can loop through a tuple elements (Example 1), check if a specific element is (not)present in a tuple (Example 2), use the len() function to check how many elements there are in a tuple (Example 3), or even join/multiply tuples (Example 4):

# Example 1
tuple_1 = (1, 2, 3)
for elem in tuple_1:
    print(elem)

# Example 2
tuple_2 = (1, 2, 3, 4)
print(5 in tuple_2)
print(5 not in tuple_2)

# Example 3
tuple_3 = (1, 2, 3, 5)
print(len(tuple_3))

# Example 4
tuple_4 = tuple_1 + tuple_2
tuple_5 = tuple_3 * 2

print(tuple_4)
print(tuple_5)


EXTRA

You can also create a tuple using a Python built-in function called tuple(). This is particularly useful when you want to convert a certain iterable (e.g., a list, range, string, etc.) to a tuple:

my_tuple = tuple((1, 2, "string"))
print(my_tuple)

my_list = [2, 4, 6]
print(my_list)    # outputs: [2, 4, 6]
print(type(my_list))    # outputs: <class 'list'>
tup = tuple(my_list)
print(tup)    # outputs: (2, 4, 6)
print(type(tup))    # outputs: <class 'tuple'>


By the same fashion, when you want to convert an iterable to a list, you can use a Python built-in function called list():

tup = 1, 2, 3,
my_list = list(tup)
print(type(my_list))    # outputs: <class 'list'>

23. Key takeaways: dictionaries

1. Dictionaries are unordered*, changeable (mutable), and indexed collections of data. (*In Python 3.6x dictionaries have become ordered by default.

Each dictionary is a set of key: value pairs. You can create it by using the following syntax:

my_dictionary = {
    key1: value1,
    key2: value2,
    key3: value3,
    }


2. If you want to access a dictionary item, you can do so by making a reference to its key inside a pair of square brackets (ex. 1) or by using the get() method (ex. 2):

pol_eng_dictionary = {
    "kwiat": "flower",
    "woda": "water",
    "gleba": "soil"
    }

item_1 = pol_eng_dictionary["gleba"]    # ex. 1
print(item_1)    # outputs: soil

item_2 = pol_eng_dictionary.get("woda")
print(item_2)    # outputs: water


3. If you want to change the value associated with a specific key, you can do so by referring to the item's key name in the following way:

pol_eng_dictionary = {
    "zamek": "castle",
    "woda": "water",
    "gleba": "soil"
    }

pol_eng_dictionary["zamek"] = "lock"
item = pol_eng_dictionary["zamek"]
print(item)  # outputs: lock


4. To add or remove a key (and the associated value), use the following syntax:

phonebook = {}    # an empty dictionary

phonebook["Adam"] = 3456783958    # create/add a key-value pair
print(phonebook)    # outputs: {'Adam': 3456783958}

del phonebook["Adam"]
print(phonebook)    # outputs: {}


You can also insert an item to a dictionary by using the update() method, and remove the last element by using the popitem() method, e.g.:

pol_eng_dictionary = {"kwiat": "flower"}

pol_eng_dictionary.update({"gleba": "soil"})
print(pol_eng_dictionary)    # outputs: {'kwiat': 'flower', 'gleba': 'soil'}

pol_eng_dictionary.popitem()
print(pol_eng_dictionary)    # outputs: {'kwiat': 'flower'}


5. You can use the for loop to loop through a dictionary, e.g.:

pol_eng_dictionary = {
    "zamek": "castle",
    "woda": "water",
    "gleba": "soil"
    }

for item in pol_eng_dictionary:
    print(item)

# outputs: zamek
#          woda
#          gleba





6. If you want to loop through a dictionary's keys and values, you can use the items() method, e.g.:

pol_eng_dictionary = {
    "zamek": "castle",
    "woda": "water",
    "gleba": "soil"
    }

for key, value in pol_eng_dictionary.items():
    print("Pol/Eng ->", key, ":", value)


7. To check if a given key exists in a dictionary, you can use the in keyword:

pol_eng_dictionary = {
    "zamek": "castle",
    "woda": "water",
    "gleba": "soil"
    }

if "zamek" in pol_eng_dictionary:
    print("Yes")
else:
    print("No")


8. You can use the del keyword to remove a specific item, or delete a dictionary. To remove all the dictionary's items, you need to use the clear() method:

pol_eng_dictionary = {
    "zamek": "castle",
    "woda": "water",
    "gleba": "soil"
    }

print(len(pol_eng_dictionary))    # outputs: 3
del pol_eng_dictionary["zamek"]    # remove an item
print(len(pol_eng_dictionary))    # outputs: 2

pol_eng_dictionary.clear()   # removes all the items
print(len(pol_eng_dictionary))    # outputs: 0

del pol_eng_dictionary    # removes the dictionary


9. To copy a dictionary, use the copy() method:

pol_eng_dictionary = {
    "zamek": "castle",
    "woda": "water",
    "gleba": "soil"
    }

copy_dictionary = pol_eng_dictionary.copy()


tup = 1, 2, 3, 2, 4, 5, 6, 2, 7, 2, 8, 9
duplicates = tup.count(2)
# outputs: 4

Key takeaways: tuples and dictionaries

Exercise 1

What happens when you attempt to run the following snippet?

my_tup = (1, 2, 3)
print(my_tup[2])


Check
The program will print 3 to the screen.


Exercise 2

What is the output of the following snippet?

tup = 1, 2, 3
a, b, c = tup

print(a * b * c)


Check
The program will print 6 to the screen. The tup tuple elements have been "unpacked" in the a, b, and c variables.


Exercise 3

Complete the code to correctly use the count() method to find the number of duplicates of 2 in the following tuple.

tup = 1, 2, 3, 2, 4, 5, 6, 2, 7, 2, 8, 9
duplicates = # Write your code here.

print(duplicates)    # outputs: 4


Check
tup = 1, 2, 3, 2, 4, 5, 6, 2, 7, 2, 8, 9
duplicates = tup.count(2)

print(duplicates)    # outputs: 4


Exercise 4

Write a program that will "glue" the two dictionaries (d1 and d2) together and create a new one (d3).

d1 = {'Adam Smith': 'A', 'Judy Paxton': 'B+'}
d2 = {'Mary Louis': 'A', 'Patrick White': 'C'}
d3 = {}

for item in (d1, d2):
    # Write your code here.

print(d3)


Check
Sample solution:
d1 = {'Adam Smith': 'A', 'Judy Paxton': 'B+'}
d2 = {'Mary Louis': 'A', 'Patrick White': 'C'}
d3 = {}

for item in (d1, d2):
    d3.update(item)

print(d3)




Exercise 5

Write a program that will convert the my_list list to a tuple.

my_list = ["car", "Ford", "flower", "Tulip"]

t =  # Write your code here.
print(t)


Check
Sample solution:
my_list = ["car", "Ford", "flower", "Tulip"]

t = tuple(my_list)
print(t)


Exercise 6

Write a program that will convert the colors tuple to a dictionary.

colors = (("green", "#008000"), ("blue", "#0000FF"))

# Write your code here.

print(colors_dictionary)


Check
Sample solution:
colors = (("green", "#008000"), ("blue", "#0000FF"))

colors_dictionary = dict(colors)
print(colors_dictionary)


Exercise 7

What will happen when you run the following code?

my_dictionary = {"A": 1, "B": 2}
copy_my_dictionary = my_dictionary.copy()
my_dictionary.clear()

print(copy_my_dictionary)


Check
The program will print {'A': 1, 'B': 2} to the screen.


Exercise 8

What is the output of the following program?

colors = {
    "white": (255, 255, 255),
    "grey": (128, 128, 128),
    "red": (255, 0, 0),
    "green": (0, 128, 0)
    }

for col, rgb in colors.items():
    print(col, ":", rgb)


Check
white : (255, 255, 255)
grey : (128, 128, 128)
red : (255, 0, 0)
green : (0, 128, 0)




























