1. The print() function
What happens when Python encounters an invocation like this one below?
function_name(argument)

First, Python checks if the name specified is legal (it browses its internal data in order to find an existing function of the name; if this search fails, Python aborts the code);
second, Python checks if the function's requirements for the number of arguments allows you to invoke the function in this way (e.g., if a specific function demands exactly two arguments, any invocation delivering only one argument will be considered erroneous, and will abort the code's execution);
third, Python leaves your code for a moment and jumps into the function you want to invoke; of course, it takes your argument(s) too and passes it/them to the function;
fourth, the function executes its code, causes the desired effect (if any), evaluates the desired result(s) (if any) and finishes its task;
finally, Python returns to your code (to the place just after the invocation) and resumes its execution.


What is the effect the print() function causes?
takes its arguments (it may accept more than one argument and may also accept less than one argument)
converts them into human-readable form if needed (as you may suspect, strings don't require this action, as the string is already readable)
and sends the resulting data to the output device (usually the console); in other words, anything you put into the print() function will appear on your screen.

What arguments does print() expect?
Any. We'll show you soon that print() is able to operate with virtually all types of data offered by Python. Strings, numbers, characters, logical values, objects - any of these may be successfully passed to print()

What value does the print() function return?
None. Its effect is enough.


2. The print() function - instructions
Python requires that there cannot be more than one instruction in a line.

print() begins its output from a new line each time it starts its execution
the instructions in the code are executed in the same order in which they have been placed in the source file;
no next instruction is executed until the previous one is completed

print() - it does output an empty line
Both the backslash and the n form a special symbol named a newline character, which urges the console to start a new output line.

a print() function invoked with more than one argument outputs them all on one line;
the print() function puts a space between the outputted arguments on its own initiative.

The print() function - the positional way of passing the arguments
-his name comes from the fact that the meaning of the argument is dictated by its position

The print() function - the keyword arguments
The name stems from the fact that the meaning of these arguments is taken not from its location (position) but from the special word (keyword) used to identify them.

In order to use it, it is necessary to know some rules:

a keyword argument consists of three elements: a keyword identifying the argument (end here); an equal sign (=); and a value assigned to that argument;
any keyword arguments have to be put after the last positional argument (this is very important)
The default behavior reflects the situation where the end keyword argument is implicitly used in the following way: end="\n".

We've said previously that the print() function separates its outputted arguments with spaces. This behavior can be changed, too.
The keyword argument that can do this is named sep (like separator).

Key takeaways
1. The print() function is a built-in function. It prints/outputs a specified message to the screen/consol window.

2. Built-in functions, contrary to user-defined functions, are always available and don't have to be imported. Python 3.8 comes with 69 built-in functions. You can find their full list provided in alphabetical order in the Python Standard Library.

3. To call a function (this process is known as function invocation or function call), you need to use the function name followed by parentheses. You can pass arguments into a function by placing them inside the parentheses. You must separate arguments with a comma, e.g., print("Hello,", "world!"). An "empty" print() function outputs an empty line to the screen.

4. Python strings are delimited with quotes, e.g., "I am a string" (double quotes), or 'I am a string, too' (single quotes).

5. Computer programs are collections of instructions. An instruction is a command to perform a specific task when executed, e.g., to print a certain message to the screen.

6. In Python strings the backslash (\) is a special character which announces that the next character has a different meaning, e.g., \n (the newline character) starts a new output line.

7. Positional arguments are the ones whose meaning is dictated by their position, e.g., the second argument is outputted after the first, the third is outputted after the second, etc.

8. Keyword arguments are the ones whose meaning is not dictated by their location, but by a special word (keyword) used to identify them.

9. The end and sep parameters can be used for formatting the output of the print() function. The sep parameter specifies the separator between the outputted arguments (e.g., print("H", "E", "L", "L", "O", sep="-"), whereas the end parameter specifies what to print at the end of the print statement.

https://edube.org/learn/programming-essentials-in-python-part-1-v1-1/python-literals-20

3. Literals
A literal is data whose values are determined by the literal itself.
You use literals to encode data and to put them into your code

The characteristic of the numeric value which determines its kind, range, and application, is called the type.
If you encode a literal and place it inside Python code, the form of the literal determines the representation (type) Python will use to store it in the memory.

What Python does allow, though, is the use of underscores in numeric literals.*
11111111, or like that: 11_111_111
Positive numbers do not need to be preceded by the plus sign, but it's permissible,

Integers
Integers: octal and hexadecimal numbers
If an integer number is preceded by an 0O or 0o prefix (zero-o), it will be treated as an octal value.
the number must contain digits taken from the [0..7] range only. - 0o123
The print() function does the conversion automatically

hexadecimal numbers. Such numbers should be preceded by the prefix 0x or 0X (zero-x).
0x123 is a hexadecimal number

Floats
designed to represent and to store the numbers that have a non-empty decimal fraction
you can omit zero when it is the only digit in front of or after the decimal point.
In essence, you can write .4 or 4. - This will change neither its type nor its value

The point is what makes a float.
it's not only points that make a float -you can use scientific notation, e / E: 3E8 == 3 x 10^8
-the exponent (the value after the E) has to be an integer;
-the base (the value in front of the E) may be an integer.
6.62607E-34 is valid - Planck's constant

Python always chooses the more economical form of the number's presentation:
print(0.0000000000000000000001) -> 1e-22

Strings:
We've shown it already, but we want to emphasize this phenomenon once more - a string can be empty - it may contain no characters at all
'' or ""

Booleans - values are case-sensitivity.
True (1)
False (0)


4. Key takeaways
1. Literals are notations for representing some fixed values in code. Python has various types of literals - for example, a literal can be a number (numeric literals, e.g., 123), or a string (string literals, e.g., "I am a literal.").

2. The binary system is a system of numbers that employs 2 as the base. Therefore, a binary number is made up of 0s and 1s only, e.g., 1010 is 10 in decimal.

Octal and hexadecimal numeration systems, similarly, employ 8 and 16 as their bases respectively. The hexadecimal system uses the decimal numbers and six extra letters.
3. Integers (or simply ints) are one of the numerical types supported by Python. They are numbers written without a fractional component, e.g., 256, or -1 (negative integers).

4. Floating-point numbers (or simply floats) are another one of the numerical types supported by Python. They are numbers that contain (or are able to contain) a fractional component, e.g., 1.27.

5. To encode an apostrophe or a quote inside a string you can either use the escape character, e.g., 'I\'m happy.', or open and close the string using an opposite set of symbols to the ones you wish to encode, e.g., "I'm happy." to encode an apostrophe, and 'He said "Python", not "typhoon"' to encode a (double) quote.

6. Boolean values are the two constant objects True and False used to represent truth values (in numeric contexts 1 is True, while 0 is False.

EXTRA

There is one more, special literal that is used in Python: the None literal. This literal is a so-called NoneType object, and it is used to represent the absence of a value. We'll tell you more about it soon.


5. Operators and expressions.
An operator is a symbol of the programming language, which is able to operate on the values.
+, -, *, /, //, %, **
Remember: Data and operators when connected together form expressions. The simplest expression is a literal itself.

print(2 ** 3)
print(2 ** 3.)
print(2. ** 3)
print(2. ** 3.)
Remember: It's possible to formulate the following rules based on this result:
when both ** arguments are integers, the result is an integer, too;
when at least one ** argument is a float, the result is a float, too.

Arithmetic operators: multiplication *

Arithmetic operators: division /
A / (slash) sign is a divisional operator.
The value in front of the slash is a dividend, the value behind the slash, a divisor.

The result produced by the division operator is always a float!

Arithmetic operators: integer division //
the results are always rounded - rounding always goes to the lesser integer.
integer by integer division gives an integer result 6 // 3 = 2 (not 2.0)
Integer division can also be called floor division

Operators: remainder (modulo)
The result of the operator is a remainder left after the integer division.
12 % 4.5 == 3.0
division by zero doesn't work!!! - ZeroDivisionError: integer division or modulo by zero

Operators: addition +

The subtraction operator, unary and binary operators

Operators and their priorities

Operators and their bindings
-binding of the operator determines the order of computations performed by some operators with equal priority,
Most of Python's operators have left-sided binding,
-calculation of the expression is conducted from left to right.

the exponentiation operator uses right-sided binding.!!! 2 ** 2 ** 3 == 64

List of priorities
+, - (unary)
**
*, /, //, %
+, - (binary)

2 * 3 % 5 == 1 -> Both operators (* and %) have the same priority, so the result can be guessed only when you know the binding direction


6. Key takeaways
1. An expression is a combination of values (or variables, operators, calls to functions - you will learn about them soon) which evaluates to a value, e.g., 1 + 2.

2. Operators are special symbols or keywords which are able to operate on the values and perform (mathematical) operations, e.g., the * operator multiplies two values: x * y.

3. Arithmetic operators in Python: + (addition), - (subtraction), * (multiplication), / (classic division - always returns a float), % (modulus - divides left operand by right operand and returns the remainder of the operation, e.g., 5 % 2 = 1), ** (exponentiation - left operand raised to the power of right operand, e.g., 2 ** 3 = 2 * 2 * 2 = 8), // (floor/integer division - returns a number resulting from division, but rounded down to the nearest whole number, e.g., 3 // 2.0 = 1.0)

4. A unary operator is an operator with only one operand, e.g., -1, or +3.

5. A binary operator is an operator with two operands, e.g., 4 + 5, or 12 % 5.

6. Some operators act before others - the hierarchy of priorities:

unary + and - have the highest priority
then: **, then: *, /, and %, and then the lowest priority: binary + and -.
7. Subexpressions in parentheses are always calculated first, e.g., 15 - 1 * (5 * (1 + 2)) = 0.

8. The exponentiation operator uses right-sided binding, e.g., 2 ** 2 ** 3 = 256.

https://edube.org/learn/programming-essentials-in-python-part-1-v1-1/variables-data-shaped-boxes-13


9. What are variables?
give a name to a variable, you must follow some strict rules:

the name of the variable must be composed of upper-case or lower-case letters, digits, and the character _ (underscore)
the name of the variable must begin with a letter;
the underscore character is a letter;
upper- and lower-case letters are treated as different (a little differently than in the real world - Alice and ALICE are the same first names, but in Python they are two different variable names, and consequently, two different variables);
the name of the variable must not be any of Python's reserved words (the keywords - we'll explain more about this soon).

A variable comes into existence as a result of assigning a value to it
If you assign any value to a nonexistent variable, the variable will be automatically created.

assignment operator

Shortcut operators
x *= 2  <--> x = x * 2
variable op= expression <--> variable = variable op expression

10. Key takeaways

1. A variable is a named location reserved to store values in the memory. A variable is created or initialized automatically when you assign a value to it for the first time. (2.1.4.1)

2. Each variable must have a unique name - an identifier. A legal identifier name must be a non-empty sequence of characters, must begin with the underscore(_), or a letter, and it cannot be a Python keyword. The first character may be followed by underscores, letters, and digits. Identifiers in Python are case-sensitive. (2.1.4.1)

3. Python is a dynamically-typed language, which means you don't need to declare variables in it. (2.1.4.3) To assign values to variables, you can use a simple assignment operator in the form of the equal (=) sign, i.e., var = 1.

4. You can also use compound assignment operators (shortcut operators) to modify values assigned to variables, e.g., var += 1, or var /= 5 * 2. (2.1.4.8)

5. You can assign new values to already existing variables using the assignment operator or one of the compound operators, e.g.: (2.1.4.5)

var = 2
print(var)

var = 3
print(var)

var += 1
print(var)


6. You can combine text and variables using the + operator, and use the print() function to output strings and variables, e.g.: (2.1.4.4)

var = "007"
print("Agent " + var)
a = 6
b = 3
a /= 2 * b
print(a)
ANSWER: a= 1.0

11. Key takeaways

1. Comments can be used to leave additional information in code. They are omitted at runtime. The information left in source code is addressed to human readers. In Python, a comment is a piece of text that begins with #. The comment extends to the end of line.

2. If you want to place a comment that spans several lines, you need to place # in front of them all. Moreover, you can use a comment to mark a piece of code that is not needed at the moment (see the last line of the snippet below), e.g.:

# This program prints
# an introduction to the screen.
print("Hello!")  # Invoking the print() function
# print("I'm Python.")


3. Whenever possible and justified, you should give self-commenting names to variables, e.g., if you're using two variables to store a length and width of something, the variable names length and width may be a better choice than myvar1 and myvar2.

4. It's important to use comments to make programs easier to understand, and to use readable and meaningful variable names in code. However, it's equally important not to use variable names that are confusing, or leave comments that contain wrong or incorrect information!

5. Comments can be important when you are reading your own code after some time (trust us, developers do forget what their own code does), and when others are reading your code (can help them understand what your programs do and how they do it more quickly).


12. The result of the input() function - result is string

Type casting
int(), float(), str()

13. Key takeaways

1. The print() function sends data to the console, while the input() function gets data from the console.

2. The input() function comes with an optional parameter: the prompt string. It allows you to write a message before the user input, e.g.:

name = input("Enter your name: ")
print("Hello, " + name + ". Nice to meet you!")


3. When the input() function is called, the program's flow is stopped, the prompt symbol keeps blinking (it prompts the user to take action when the console is switched to input mode) until the user has entered an input and/or pressed the Enter key.

NOTE

You can test the functionality of the input() function in its full scope locally on your machine. For resource optimization reasons, we have limited the maximum program execution time in Edube to a few seconds. Go to Sandbox, copy-paste the above snippet, run the program, and do nothing - just wait a few seconds to see what happens. Your program should be stopped automatically after a short moment. Now open IDLE, and run the same program there - can you see the difference?

Tip: the above-mentioned feature of the input() function can be used to prompt the user to end a program. Look at the code below:

name = input("Enter your name: ")
print("Hello, " + name + ". Nice to meet you!")

print("\nPress Enter to end the program.")
input()
print("THE END.")


3. The result of the input() function is a string. You can add strings to each other using the concatenation (+) operator. Check out this code:

num_1 = input("Enter the first number: ") # Enter 12
num_2 = input("Enter the second number: ") # Enter 21

print(num_1 + num_2) # the program returns 1221


4. You can also multiply (* - replication) strings, e.g.:

my_input = input("Enter something: ") # Example input: hello
print(my_input * 3) # Expected output: hellohellohello

https://edube.org/learn/programming-essentials-in-python-part-1-v1-1/module-completion-22
1 // 2*3 <--> 0 (not 0.0)
























